import google.generativeai as genai
import fitz  # PyMuPDF
import os
from PIL import Image
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# --- Configuration ---
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")

# Language for the output LaTeX content
OUTPUT_LANGUAGE = "Portuguese (Brazil)"  # Change to your preferred language

# Path to your PDF file
PDF_PATH = "C:/Users/leona/Downloads/Kepes_Gyorgy_Language_of_Vision.pdf"

# Path for the output LaTeX file
LATEX_OUTPUT_PATH = "output.tex"

# Set the number of pages to process for testing.
# Set this to a very high number (e.g., 10000) to process all pages.
PAGES_TO_PROCESS = 1000

# --- Main Script ---
def configure_genai():
    """Configures the Google Generative AI client."""
    if not GOOGLE_API_KEY:
        print("Error: GOOGLE_API_KEY environment variable not set.")
        print("Please create a .env file and add your GOOGLE_API_KEY to it.")
        exit()
    try:
        genai.configure(api_key=GOOGLE_API_KEY)
    except Exception as e:
        print(f"Error configuring Google AI Studio API: {e}")
        exit()

def generate_latex_from_pdf():
    """
    Opens a PDF, renders each page as an image, sends it to the Gemini Vision API
    for OCR and LaTeX formatting, and saves the LaTeX file incrementally.
    """
    model = genai.GenerativeModel('gemini-2.5-flash') # Using your selected model

    try:
        pdf_document = fitz.open(PDF_PATH)
    except Exception as e:
        print(f"Error opening PDF file: {e}")
        return

    total_pages = len(pdf_document)
    if PAGES_TO_PROCESS >= 10000:
        num_pages_to_run = total_pages
    else:
        num_pages_to_run = min(PAGES_TO_PROCESS, total_pages)

    latex_preamble = r"""\documentclass[a4paper]{article}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{graphicx}
\usepackage{geometry}
\geometry{a4paper, margin=1in}
\usepackage{hyperref}

\title{PDF to LaTeX Conversion (via OCR)}
\author{Generated by Python and Gemini}
\date{\today}

\begin{document}

\maketitle

"""
    try:
        with open(LATEX_OUTPUT_PATH, "w", encoding="utf-8") as latex_file:
            latex_file.write(latex_preamble)
    except Exception as e:
        print(f"Error writing initial preamble to file: {e}")
        return

    print(f"Processing the first {num_pages_to_run} of {total_pages} total pages using {model.model_name} for OCR...")
    print(f"Progress will be saved to '{LATEX_OUTPUT_PATH}' after each page.")

    for page_num in range(num_pages_to_run):
        page = pdf_document.load_page(page_num)
        
        print(f"  - Processing Page {page_num + 1}/{num_pages_to_run}...")

        pix = page.get_pixmap(dpi=300)
        img = Image.frombytes("RGB", [pix.width, pix.height], pix.samples)

        # <<< FIXED: Escaped the curly braces around {document} by doubling them
        prompt = f"""You are an expert in typesetting and LaTeX.
Your task is to perform OCR on the following image of a document page.
Extract all text, translate it to {OUTPUT_LANGUAGE}, and format it into clean, well-structured LaTeX body content.
Preserve paragraphs, left alignment, keeping heads (do not use pages as headings).
Respond ONLY with the raw LaTeX code for this page's content. Do not include a preamble, the \\documentclass, or \\begin{{document}} commands. Do not add any commentary or explanations.
"""
        
        page_content_to_add = f"\\newpage\n\\section*{{Page {page_num + 1}}}\n\n"
        
        try:
            response = model.generate_content([prompt, img])
            
            clean_text = response.text.strip()
            if clean_text.startswith("```latex"):
                clean_text = clean_text[7:]
            if clean_text.endswith("```"):
                clean_text = clean_text[:-3]
            
            page_content_to_add += clean_text.strip() + "\n\n"

        except Exception as e:
            print(f"    - Error generating content for page {page_num + 1}: {e}")
            page_content_to_add += f"%% Error processing this page with the Vision API. See console for details. %% \n\n"

        try:
            with open(LATEX_OUTPUT_PATH, "a", encoding="utf-8") as latex_file:
                latex_file.write(page_content_to_add)
        except Exception as e:
            print(f"    - Error writing page {page_num + 1} to file: {e}")

    try:
        with open(LATEX_OUTPUT_PATH, "a", encoding="utf-8") as latex_file:
            latex_file.write(r"\end{document}")
        print(f"\nProcessing complete. Final LaTeX file is ready: {LATEX_OUTPUT_PATH}")
    except Exception as e:
        print(f"\nError writing final \\end{{document}} to file: {e}")

    pdf_document.close()


if __name__ == "__main__":
    configure_genai()
    generate_latex_from_pdf()